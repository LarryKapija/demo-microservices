/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.demo.op.api;

import javax.annotation.Generated;
import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.demo.op.model.EmptyResponseDTO;
import com.demo.op.model.JwtResponseDTO;
import com.demo.op.model.LoginRequestDTO;
import com.demo.op.model.RegisterConfirmationRequestDTO;
import com.demo.op.model.RegisterRequestDTO;
import com.demo.op.model.RegistroResponseDTO;
import com.demo.op.model.ValidatePhoneRequestDTO;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-21T09:36:06.188-04:00[America/Santo_Domingo]")
@Validated
@Tag(name = "auth", description = "the auth API")
public interface AuthApi {

    /**
     * POST /auth/signin : Autentificar usuario
     *
     * @param loginRequestDTO Autentificar user (required)
     * @return Autentificado de forma correcta (status code 200)
     *         or No Autorizado (status code 401)
     *         or Request Invalido (status code 400)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "authenticateUser",
        summary = "Autentificar usuario",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Autentificado de forma correcta", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  JwtResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "400", description = "Request Invalido", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/signin",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<JwtResponseDTO> authenticateUser(
        @Parameter(name = "LoginRequestDTO", description = "Autentificar user", required = true, schema = @Schema(description = "")) @Valid @RequestBody LoginRequestDTO loginRequestDTO
    );


    /**
     * POST /auth/signup : Registrar nuevo usuario
     *
     * @param registroRequestDTO Auth user (required)
     * @return Autenticado de forma correcta (status code 200)
     *         or No Autorizado (status code 401)
     *         or Validacion invalida (status code 400)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "registerUser",
        summary = "Registrar nuevo usuario",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Autenticado de forma correcta", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  RegistroResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "400", description = "Validacion invalida", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  RegistroResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/signup",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<RegistroResponseDTO> registerUser(
        @Parameter(name = "RegistroRequestDTO", description = "Auth user", required = true, schema = @Schema(description = "")) @Valid @RequestBody RegisterRequestDTO registroRequestDTO
    );


    /**
     * POST /auth/send-phone-otp : Envia OTP al telefono
     *
     * @param validatePhoneRequestDTO enviar OTP al telefono (required)
     * @return OTP enviado (status code 200)
     *         or No Autorizado (status code 401)
     *         or Request Invalido (status code 400)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "sendPhoneOTP",
        summary = "Envia OTP al telefono",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OTP enviado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "400", description = "Request Invalido", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/send-phone-otp",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<EmptyResponseDTO> sendPhoneOTP(
        @Parameter(name = "ValidatePhoneRequestDTO", description = "enviar OTP al telefono", required = true, schema = @Schema(description = "")) @Valid @RequestBody ValidatePhoneRequestDTO validatePhoneRequestDTO
    );


    /**
     * POST /auth/validate-otp : Validar OTP del telefono
     *
     * @param confirmacionRegistroRequestDTO Validar OTP del telefono (required)
     * @return OTP validado (status code 200)
     *         or No Autorizado (status code 401)
     *         or OTP invalido (status code 400)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "validateOTP",
        summary = "Validar OTP del telefono",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OTP validado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  JwtResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "400", description = "OTP invalido", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/validate-otp",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<JwtResponseDTO> validateOTP(
        @Parameter(name = "ConfirmacionRegistroRequestDTO", description = "Validar OTP del telefono", required = true, schema = @Schema(description = "")) @Valid @RequestBody RegisterConfirmationRequestDTO confirmacionRegistroRequestDTO
    );

}
