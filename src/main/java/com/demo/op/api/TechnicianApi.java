/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.demo.op.api;

import com.demo.op.model.EmptyResponseDTO;
import com.demo.op.model.LocationRequestDTO;
import com.demo.op.model.TechnicianRequestDTO;
import com.demo.op.model.TechnicianResponseDTO;
import com.demo.op.model.TecniciansResponseDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-21T09:36:06.188-04:00[America/Santo_Domingo]")
@Validated
@Tag(name = "tecnico", description = "the tecnico API")
public interface TechnicianApi {

    /**
     * GET /tecnico : Retorna todos los tecnicos
     *
     * @return Operacion Exitosa (status code 200)
     *         or No Autorizado (status code 401)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "getAllTechnicians",
        summary = "Retorna todos los tecnicos",
        tags = { "Technician" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operacion Exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  TecniciansResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tecnico",
        produces = { "application/json" }
    )
    ResponseEntity<TecniciansResponseDTO> getAllTechnicians(
        
    );


    /**
     * GET /tecnico/{id} : Retorna un Technician especifico
     *
     * @param id ID del tecnico a retornar (required)
     * @return Technician encontrado (status code 200)
     *         or No Autorizado (status code 401)
     *         or No se encontro el reporte (status code 404)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "getTechnicianById",
        summary = "Retorna un Technician especifico",
        tags = { "Technician" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Technician encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  TechnicianResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "404", description = "No se encontro el reporte", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tecnico/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<TechnicianResponseDTO> getTechnicianById(
        @Parameter(name = "id", description = "ID del tecnico a retornar", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id
    );


    /**
     * GET /tecnico/telefono/{telefono} : Retorna un Technician especifico
     *
     * @param telefono Telefono del tecnico a retornar (required)
     * @return Technician encontrado (status code 200)
     *         or No Autorizado (status code 401)
     *         or No se encontro el reporte (status code 404)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "getTechnicianByTelefono",
        summary = "Retorna un Technician especifico",
        tags = { "Technician" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Technician encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  TechnicianResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "404", description = "No se encontro el reporte", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tecnico/telefono/{telefono}",
        produces = { "application/json" }
    )
    ResponseEntity<TechnicianResponseDTO> getTechnicianByTelefono(
        @Parameter(name = "telefono", description = "Telefono del tecnico a retornar", required = true, schema = @Schema(description = "")) @PathVariable("telefono") String telefono
    );


    /**
     * POST /tecnico : Crea un tecnico
     *
     * @param tecnicoRequestDTO Crea un nuevo tecnico (required)
     * @return Technician creado (status code 200)
     *         or No Autorizado (status code 401)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "saveTechnician",
        summary = "Crea un tecnico",
        tags = { "Technician" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Technician creado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  TechnicianResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tecnico",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<TechnicianResponseDTO> saveTechnician(
        @Parameter(name = "TechnicianRequestDTO", description = "Crea un nuevo tecnico", required = true, schema = @Schema(description = "")) @Valid @RequestBody TechnicianRequestDTO tecnicoRequestDTO
    );


    /**
     * PUT /tecnico/{id} : Actualizar un Technician
     *
     * @param id ID del tecnico a editar (required)
     * @param tecnicoRequestDTO Actualizar un tecnico existente (required)
     * @return Asistencia actualizada (status code 200)
     *         or No Autorizado (status code 401)
     *         or No se encontro el reporte (status code 404)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "updateTechnician",
        summary = "Actualizar un Technician",
        tags = { "Technician" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Asistencia actualizada", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "404", description = "No se encontro el reporte", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tecnico/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<EmptyResponseDTO> updateTechnician(
        @Parameter(name = "id", description = "ID del tecnico a editar", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id,
        @Parameter(name = "TechnicianRequestDTO", description = "Actualizar un tecnico existente", required = true, schema = @Schema(description = "")) @Valid @RequestBody TechnicianRequestDTO tecnicoRequestDTO
    );


    /**
     * PATCH /tecnico/{id}/location : Actualizar ubicacion del Technician
     *
     * @param id ID del tecnico a actualizar (required)
     * @param locationRequestDTO Actualizar un tecnico existente (required)
     * @return Asistencia actualizada (status code 200)
     *         or No Autorizado (status code 401)
     *         or No se encontro el reporte (status code 404)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "updateTechnicianLocation",
        summary = "Actualizar ubicacion del Technician",
        tags = { "Technician" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Asistencia actualizada", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "404", description = "No se encontro el reporte", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/tecnico/{id}/location",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<EmptyResponseDTO> updateTechnicianLocation(
        @Parameter(name = "id", description = "ID del tecnico a actualizar", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id,
        @Parameter(name = "LocationRequestDTO", description = "Actualizar un tecnico existente", required = true, schema = @Schema(description = "")) @Valid @RequestBody LocationRequestDTO locationRequestDTO
    );

}
