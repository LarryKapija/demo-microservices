/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.demo.op.api;

import com.demo.op.model.EmptyResponseDTO;
import com.demo.op.model.LocationRequestDTO;
import com.demo.op.model.ReportRequestDTO;
import com.demo.op.model.ReporteResponseDTO;
import com.demo.op.model.ReportsResponseDTO;
import com.demo.op.model.LocationReportResponseDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-21T09:36:06.188-04:00[America/Santo_Domingo]")
@Validated
@Tag(name = "reporte", description = "the reporte API")
public interface ReporteApi {

    /**
     * GET /reporte : Retorna todos los reportes
     *
     * @return Operacion Exitosa (status code 200)
     *         or No Autorizado (status code 401)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "getAllReportes",
        summary = "Retorna todos los reportes",
        tags = { "Reporte" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operacion Exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ReportsResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/reporte",
        produces = { "application/json" }
    )
    ResponseEntity<ReportsResponseDTO> getAllReportes(
        
    );


    /**
     * POST /reporte/location : Retorna si es posible realizar un reporte en una ubicacion
     *
     * @param locationRequestDTO Ubicacion a validar (required)
     * @return Es Posible (status code 200)
     *         or Request Invalido (status code 400)
     *         or No Autorizado (status code 401)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "getPuedeCrearReporteEnUbicacion",
        summary = "Retorna si es posible realizar un reporte en una ubicacion",
        tags = { "Reporte" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Es Posible", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  LocationReportResponseDTO.class))),
            @ApiResponse(responseCode = "400", description = "Request Invalido", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/reporte/location",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<LocationReportResponseDTO> getPuedeCrearReporteEnUbicacion(
        @Parameter(name = "LocationRequestDTO", description = "Ubicacion a validar", required = true, schema = @Schema(description = "")) @Valid @RequestBody LocationRequestDTO locationRequestDTO
    );


    /**
     * GET /reporte/{id} : Retorna un Reporte especifico
     *
     * @param id ID del reporte a retornar (required)
     * @return Reporte encontrado (status code 200)
     *         or No Autorizado (status code 401)
     *         or No se encontro el reporte (status code 404)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "getReporteById",
        summary = "Retorna un Reporte especifico",
        tags = { "Reporte" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Reporte encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ReporteResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "404", description = "No se encontro el reporte", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/reporte/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<ReporteResponseDTO> getReporteById(
        @Parameter(name = "id", description = "ID del reporte a retornar", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id
    );


    /**
     * GET /reporte/telefono/{telefono} : Retorna los reportes de un ciudadano especifco
     *
     * @param telefono telefono del ciudadano (required)
     * @return Operacion Exitosa (status code 200)
     *         or No Autorizado (status code 401)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "getReportesByTelefono",
        summary = "Retorna los reportes de un ciudadano especifco",
        tags = { "Reporte" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operacion Exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ReportsResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/reporte/telefono/{telefono}",
        produces = { "application/json" }
    )
    ResponseEntity<ReportsResponseDTO> getReportesByTelefono(
        @Parameter(name = "telefono", description = "telefono del ciudadano", required = true, schema = @Schema(description = "")) @PathVariable("telefono") String telefono
    );


    /**
     * POST /reporte : Crea un reporte
     *
     * @param reporteRequestDTO Crea un nuevo reporte (required)
     * @return Reporte creado (status code 200)
     *         or No Autorizado (status code 401)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "saveReporte",
        summary = "Crea un reporte",
        tags = { "Reporte" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Reporte creado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ReporteResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/reporte",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ReporteResponseDTO> saveReporte(
        @Parameter(name = "ReporteRequestDTO", description = "Crea un nuevo reporte", required = true, schema = @Schema(description = "")) @Valid @RequestBody ReportRequestDTO reporteRequestDTO
    );


    /**
     * PUT /reporte/{id} : Actualizar un Reporte
     *
     * @param id ID del reporte a editar (required)
     * @param reporteRequestDTO Actualizar un reporte existente (required)
     * @return Reporte actualizado (status code 200)
     *         or No Autorizado (status code 401)
     *         or No se encontro el reporte (status code 404)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "updateReporte",
        summary = "Actualizar un Reporte",
        tags = { "Reporte" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Reporte actualizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "404", description = "No se encontro el reporte", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/reporte/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<EmptyResponseDTO> updateReporte(
        @Parameter(name = "id", description = "ID del reporte a editar", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id,
        @Parameter(name = "ReporteRequestDTO", description = "Actualizar un reporte existente", required = true, schema = @Schema(description = "")) @Valid @RequestBody ReportRequestDTO reporteRequestDTO
    );

}
