/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.demo.op.api;

import com.demo.op.model.AsistanceRequestDTO;
import com.demo.op.model.AsistanceResponseDTO;
import com.demo.op.model.AsistancesResponseDTO;
import com.demo.op.model.EmptyResponseDTO;
import com.demo.op.model.AssistanceStatusRequestDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-21T09:36:06.188-04:00[America/Santo_Domingo]")
@Validated
@Tag(name = "asistencia", description = "the asistencia API")
public interface AsistenciaApi {

    /**
     * GET /asistencia : Retorna todas las asistencias
     *
     * @return Operacion Exitosa (status code 200)
     *         or No Autorizado (status code 401)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "getAllAsistencias",
        summary = "Retorna todas las asistencias",
        tags = { "Asistencia" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operacion Exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  AsistancesResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/asistencia",
        produces = { "application/json" }
    )
    ResponseEntity<AsistancesResponseDTO> getAllAsistencias(
        
    );


    /**
     * GET /asistencia/{id} : Retorna una Asistencia especifica
     *
     * @param id ID de la asistencia a retornar (required)
     * @return Asistencia encontrado (status code 200)
     *         or No Autorizado (status code 401)
     *         or No se encontro el reporte (status code 404)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "getAsistenciaById",
        summary = "Retorna una Asistencia especifica",
        tags = { "Asistencia" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Asistencia encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  AsistanceResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "404", description = "No se encontro el reporte", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/asistencia/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<AsistanceResponseDTO> getAsistenciaById(
        @Parameter(name = "id", description = "ID de la asistencia a retornar", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id
    );


    /**
     * GET /asistencia/tecnico/{idTechnician} : Retorna todas las asistencias
     *
     * @param idTechnician ID del tecnico encargado (required)
     * @return Operacion Exitosa (status code 200)
     *         or No Autorizado (status code 401)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "getAsistenciasByTechnician",
        summary = "Retorna todas las asistencias",
        tags = { "Asistencia" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operacion Exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  AsistancesResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/asistencia/tecnico/{idTechnician}",
        produces = { "application/json" }
    )
    ResponseEntity<AsistancesResponseDTO> getAsistenciasByTechnician(
        @Parameter(name = "idTechnician", description = "ID del tecnico encargado", required = true, schema = @Schema(description = "")) @PathVariable("idTechnician") Long idTechnician
    );


    /**
     * POST /asistencia : Crea una asistencia
     *
     * @param asistenciaRequestDTO Crea una nueva asistencia (required)
     * @return Asistencia creada (status code 200)
     *         or No Autorizado (status code 401)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "saveAsistencia",
        summary = "Crea una asistencia",
        tags = { "Asistencia" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Asistencia creada", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  AsistanceResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/asistencia",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<AsistanceResponseDTO> saveAsistencia(
        @Parameter(name = "AsistenciaRequestDTO", description = "Crea una nueva asistencia", required = true, schema = @Schema(description = "")) @Valid @RequestBody AsistanceRequestDTO asistenciaRequestDTO
    );


    /**
     * PUT /asistencia/{id} : Actualizar una Asistencia
     *
     * @param id ID de la asistencia a editar (required)
     * @param asistenciaRequestDTO Actualizar una asistencia existente (required)
     * @return Asistencia actualizada (status code 200)
     *         or No Autorizado (status code 401)
     *         or No se encontro el reporte (status code 404)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "updateAsistencia",
        summary = "Actualizar una Asistencia",
        tags = { "Asistencia" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Asistencia actualizada", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "404", description = "No se encontro el reporte", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/asistencia/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<EmptyResponseDTO> updateAsistencia(
        @Parameter(name = "id", description = "ID de la asistencia a editar", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id,
        @Parameter(name = "AsistenciaRequestDTO", description = "Actualizar una asistencia existente", required = true, schema = @Schema(description = "")) @Valid @RequestBody AsistanceRequestDTO asistenciaRequestDTO
    );


    /**
     * PATCH /asistencia/{id} : Actualizar el estado de una Asistencia
     *
     * @param id ID de la asistencia a editar (required)
     * @param estadoAsistenciaRequestDTO Actualizar el estado de una asistencia existente (required)
     * @return Asistencia actualizada (status code 200)
     *         or No Autorizado (status code 401)
     *         or No se encontro el reporte (status code 404)
     *         or Error en el servidor (status code 500)
     */
    @Operation(
        operationId = "updateEstadoAsistencia",
        summary = "Actualizar el estado de una Asistencia",
        tags = { "Asistencia" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Asistencia actualizada", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No Autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "404", description = "No se encontro el reporte", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class))),
            @ApiResponse(responseCode = "500", description = "Error en el servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  EmptyResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/asistencia/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<EmptyResponseDTO> updateEstadoAsistencia(
        @Parameter(name = "id", description = "ID de la asistencia a editar", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id,
        @Parameter(name = "EstadoAsistenciaRequestDTO", description = "Actualizar el estado de una asistencia existente", required = true, schema = @Schema(description = "")) @Valid @RequestBody AssistanceStatusRequestDTO estadoAsistenciaRequestDTO
    );

}
